const axios = require("axios");
const { ton } = require("./config"); // Aseg√∫rate de tener tu configuraci√≥n de TON (API Key, baseURL, etc.)
const Buffer = require('buffer').Buffer;

// ‚úÖ Funci√≥n para limpiar direcciones (elimina "0:" pero no cambia a min√∫sculas)
function cleanTONAddress(address) {
    if (!address) return "";
    return address.replace(/^0:/, "");  // Elimina "0:" al principio de la direcci√≥n
}

// ‚úÖ Funci√≥n para convertir la wallet a un formato consistente (Buffer y codificaci√≥n correcta)
function convertWalletToStandardFormat(wallet) {
    const cleanWallet = cleanTONAddress(wallet);
    const buffer = Buffer.from(cleanWallet, 'hex'); // Convertimos la wallet en un Buffer
    return buffer.toString('hex');  // Convertimos el buffer nuevamente en string hexadecimal
}

// ‚úÖ Funci√≥n para obtener los detalles de la transacci√≥n de la API de TON
async function getTONTransaction(txid) {
    try {
        const response = await axios.get(`https://tonapi.io/v2/blockchain/transactions/${txid}`); 
        return response.data; 
    } catch (error) {
        console.error("‚ùå Error al obtener la transacci√≥n de la API de TON:", error.response?.data || error.message);
        return null; // ‚ö†Ô∏è Devuelve null en caso de error
    }
}

// ‚úÖ Funci√≥n para verificar transacci√≥n en TON API
async function verifyTONTransaction(txid, totalCost, senderWallet, userId) {
    try {
        // üîπ Llamada a la API para obtener la transacci√≥n
        const transaction = await getTONTransaction(txid);

        // üî¥ Si la transacci√≥n no existe o es inv√°lida, devolver false
        if (!transaction || !transaction.success) {
            console.error("‚ùå Transacci√≥n no encontrada o fallida.");
            return false;
        }

        // ‚úÖ Obtener el monto correcto desde `out_msgs`
        if (!transaction.out_msgs || transaction.out_msgs.length === 0) {
            console.error("‚ùå La transacci√≥n no tiene salidas (out_msgs).");
            return false;
        }

        // ‚úÖ Extraer el monto real enviado en nanoTON
        const txAmountNano = parseInt(transaction.out_msgs[0].value, 10); // ‚ö†Ô∏è Asegurar que es un n√∫mero entero

        // ‚úÖ Comparar el monto con el esperado
        if (txAmountNano !== totalCost) {
            console.error(`‚ùå El monto de la transacci√≥n (${txAmountNano} nanoTON) no coincide con el costo esperado (${totalCost} nanoTON).`);
            return false;
        }

        // ‚úÖ Validar la wallet de destino correcta (sin cambiar a min√∫sculas)
        const receiverWallet = cleanTONAddress(transaction.out_msgs[0].destination?.address);
        const expectedReceiverWallet = convertWalletToStandardFormat(ton.publicAddress); // Convertimos a formato est√°ndar

        if (receiverWallet !== expectedReceiverWallet) {
            console.error(`‚ùå Wallet de destino incorrecta. Esperado: ${expectedReceiverWallet}, Recibido: ${receiverWallet}`);
            return false;
        }

        // ‚úÖ Validar la wallet de origen correcta
        const senderWalletClean = cleanTONAddress(senderWallet);
        const transactionSenderWallet = cleanTONAddress(transaction.in_msg?.source?.address);

        if (transactionSenderWallet !== senderWalletClean) {
            console.error(`‚ùå Wallet de origen incorrecta. Esperado: ${senderWalletClean}, Recibido: ${transactionSenderWallet}`);
            return false;
        }

        console.log("‚úÖ Transacci√≥n v√°lida.");
        return true;
    } catch (error) {
        console.error("‚ùå Error verificando transacci√≥n:", error.message || error.response?.data);
        return false;
    }
}

module.exports = { verifyTONTransaction };
